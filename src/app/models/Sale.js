import mongoose from 'mongoose';

const saleItemSchema = new mongoose.Schema({
  item: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Item',
    required: true,
  },
  itemName: String, // Store name for reference even if item is deleted
  itemBarcode: String, // Store barcode for reference
  quantity: {
    type: Number,
    required: true,
    min: 1,
  },
  unitPrice: {
    type: Number,
    required: true,
    min: 0,
  },
  totalPrice: {
    type: Number,
    required: true,
    min: 0,
  },
});

const saleSchema = new mongoose.Schema({
  saleNumber: {
    type: String,
    required: false, // Will be generated by pre-save hook
  },
  client: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Client',
    required: true,
  },
  clientName: String, // Store name for reference
  items: [saleItemSchema],
  subtotal: {
    type: Number,
    required: true,
    min: 0,
  },
  tax: {
    type: Number,
    default: 0,
    min: 0,
  },
  discount: {
    type: Number,
    default: 0,
    min: 0,
  },
  total: {
    type: Number,
    required: true,
    min: 0,
  },
  paymentMethod: {
    type: String,
    enum: ['cash', 'card', 'bank_transfer', 'other'],
    default: 'cash',
  },
  status: {
    type: String,
    enum: ['completed', 'pending', 'cancelled'],
    default: 'completed',
  },
  notes: {
    type: String,
    trim: true,
  },
}, {
  timestamps: true,
});

// Create indexes
saleSchema.index({ saleNumber: 1 }, { unique: true });
saleSchema.index({ client: 1 });
saleSchema.index({ createdAt: -1 });

// Generate sale number before saving
saleSchema.pre('save', async function(next) {
  if (!this.saleNumber) {
    const today = new Date();
    const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');
    
    // Find the last sale of today
    const lastSale = await this.constructor.findOne({
      saleNumber: { $regex: `^${dateStr}` }
    }).sort({ saleNumber: -1 });
    
    let sequence = 1;
    if (lastSale) {
      const lastSequence = parseInt(lastSale.saleNumber.slice(-4));
      sequence = lastSequence + 1;
    }
    
    this.saleNumber = `${dateStr}${sequence.toString().padStart(4, '0')}`;
  }
  next();
});

export default mongoose.models.Sale || mongoose.model('Sale', saleSchema);
